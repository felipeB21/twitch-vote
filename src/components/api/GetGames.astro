---
interface Game {
  id: number;
  name: string;
  box_art_url: string;
}

const clientId = import.meta.env.TWITCH_CLIENT_ID;
const clientSecret = import.meta.env.TWITCH_CLIENT_SECRET;

const token = await fetch(
  `https://id.twitch.tv/oauth2/token?client_id=${clientId}&client_secret=${clientSecret}&grant_type=client_credentials`,
  {
    method: "POST",
  }
);

const res = await token.json();
const accessToken = res.access_token;

const response = await fetch("https://api.twitch.tv/helix/games/top", {
  method: "GET",
  headers: {
    Authorization: `Bearer ${accessToken}`,
    "Client-Id": import.meta.env.TWITCH_CLIENT_ID,
  },
});

const data = await response.json();
---

<div>
  <ul
    class="grid xl:grid-cols-6 md:grid-cols-4 sm:grid-cols-3 grid-cols-1 gap-10"
  >
    {
      data.data.map((game: Game) => (
        <li>
          <div class="flex flex-col items-center gap-1">
            <p class="text-[10px] font-medium max-w-[300px]">
              {game.name.slice(0, 25)}
            </p>
            <button>
              <img
                class="streamer-image"
                src={game.box_art_url.replace("{width}x{height}", "120x160")}
                alt={game.name}
                loading="lazy"
              />
            </button>
          </div>
        </li>
      ))
    }
  </ul>
  <div class="flex justify-between mt-10">
    <button class="bg-neutral-700 p-2 rounded hover:bg-neutral-900"
      >Previous</button
    >
    <button class="bg-neutral-700 p-2 rounded hover:bg-neutral-900">Next</button
    >
  </div>
</div>
